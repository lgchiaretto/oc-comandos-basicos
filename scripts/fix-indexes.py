#!/usr/bin/env python3
"""
Script para corrigir automaticamente os √≠ndices em arquivos markdown.
Gera √≠ndice APENAS com se√ß√µes de n√≠vel 2 (##), excluindo subse√ß√µes (###).
"""

import re
from pathlib import Path
from typing import List, Tuple


def extract_main_sections(content: str) -> List[Tuple[str, str, str]]:
    """Extrai apenas se√ß√µes principais (## T√≠tulo) do markdown.
    
    Retorna lista de tuplas (emoji, titulo, anchor).
    Ignora subse√ß√µes (###) e se√ß√µes especiais.
    """
    sections = []
    
    # Pattern para capturar apenas ## (n√≠vel 2)
    # Usa ^## seguido de espa√ßo (n√£o ###)
    pattern = r'^## ([^#].*?)$'
    
    for match in re.finditer(pattern, content, re.MULTILINE):
        full_title = match.group(1).strip()
        
        # Ignorar se√ß√µes especiais
        if any(x in full_title for x in ['üìã √çndice', 'üìñ Navega√ß√£o', 'üìö Documenta√ß√£o']):
            continue
        
        # Separar emoji do t√≠tulo
        emoji = ''
        title = full_title
        
        # Regex para capturar emoji no in√≠cio (Unicode range)
        emoji_match = re.match(r'^([\U0001F300-\U0001F9FF\U00002600-\U000027BF\U0001F000-\U0001F02F]+)\s*(.*)', full_title)
        if emoji_match:
            emoji = emoji_match.group(1)
            title = emoji_match.group(2).strip()
        
        # Gerar anchor (lowercase, sem acentos, h√≠fens)
        anchor = title.lower()
        # Remove acentos
        anchor = re.sub(r'[√†√°√¢√£√§√•]', 'a', anchor)
        anchor = re.sub(r'[√®√©√™√´]', 'e', anchor)
        anchor = re.sub(r'[√¨√≠√Æ√Ø]', 'i', anchor)
        anchor = re.sub(r'[√≤√≥√¥√µ√∂]', 'o', anchor)
        anchor = re.sub(r'[√π√∫√ª√º]', 'u', anchor)
        anchor = re.sub(r'[√ß]', 'c', anchor)
        # Remove caracteres especiais
        anchor = re.sub(r'[^a-z0-9\s-]', '', anchor)
        # Substitui espa√ßos por h√≠fens
        anchor = re.sub(r'\s+', '-', anchor)
        # Remove h√≠fens duplicados
        anchor = re.sub(r'-+', '-', anchor)
        anchor = anchor.strip('-')
        
        sections.append((emoji, title, anchor))
    
    return sections


def generate_index(sections: List[Tuple[str, str, str]]) -> str:
    """Gera o conte√∫do do √≠ndice a partir das se√ß√µes."""
    if not sections:
        return ""
    
    lines = ["## üìã √çndice\n"]
    
    for i, (emoji, title, anchor) in enumerate(sections, 1):
        # Formato: 1. [üîß T√≠tulo](#anchor)
        emoji_part = f"{emoji} " if emoji else ""
        lines.append(f"{i}. [{emoji_part}{title}](#{anchor})")
    
    lines.append("")  # Linha em branco no final
    return '\n'.join(lines)


def fix_index_in_file(file_path: Path, verbose: bool = False) -> bool:
    """Corrige o √≠ndice em um arquivo markdown.
    
    Retorna True se houve modifica√ß√£o.
    """
    try:
        content = file_path.read_text(encoding='utf-8')
    except Exception as e:
        print(f"  ‚ùå ERRO ao ler {file_path.name}: {e}")
        return False
    
    # Extrair se√ß√µes principais
    sections = extract_main_sections(content)
    
    if not sections:
        print(f"  ‚ö†Ô∏è  Nenhuma se√ß√£o principal encontrada")
        return False
    
    if verbose:
        print(f"  Se√ß√µes encontradas: {[s[1] for s in sections]}")
    
    # Gerar novo √≠ndice
    new_index = generate_index(sections)
    
    # Pattern para encontrar o √≠ndice existente
    # Procura por "## üìã √çndice" at√© a pr√≥xima linha com "---" ou pr√≥xima se√ß√£o "##"
    index_pattern = r'## üìã √çndice\n.*?(?=\n---|\n##|\Z)'
    
    # Verificar se √≠ndice existe
    if not re.search(index_pattern, content, re.DOTALL):
        print(f"  ‚ö†Ô∏è  √çndice n√£o encontrado no arquivo")
        return False
    
    # Substituir √≠ndice
    new_content = re.sub(
        index_pattern, 
        new_index.rstrip(), 
        content, 
        count=1, 
        flags=re.DOTALL
    )
    
    # Salvar apenas se houve mudan√ßa
    if new_content != content:
        file_path.write_text(new_content, encoding='utf-8')
        print(f"  ‚úì √çndice corrigido ({len(sections)} se√ß√µes)")
        return True
    else:
        print(f"  ‚ÑπÔ∏è  √çndice j√° est√° correto")
        return False


def main():
    """Ponto de entrada principal."""
    import argparse
    
    parser = argparse.ArgumentParser(description='Corrige √≠ndices em arquivos markdown')
    parser.add_argument('-v', '--verbose', action='store_true', help='Modo verbose')
    args = parser.parse_args()
    
    base_dir = Path(__file__).parent.parent
    
    print("Corretor Autom√°tico de √çndices")
    print("=" * 60)
    
    # Encontrar arquivos markdown numerados
    md_files = []
    for i in range(1, 31):
        matches = list(base_dir.glob(f"{i:02d}-*.md"))
        if matches:
            md_files.extend(matches)
    
    md_files = sorted(md_files)
    print(f"\n{len(md_files)} arquivos encontrados\n")
    
    fixed_count = 0
    
    for md_file in md_files:
        print(f"üìÑ {md_file.name}")
        if fix_index_in_file(md_file, args.verbose):
            fixed_count += 1
        print()
    
    print("=" * 60)
    print(f"‚úÖ Conclu√≠do! {fixed_count} √≠ndices corrigidos")


if __name__ == "__main__":
    main()
